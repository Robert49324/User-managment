name: test

on: [push]

jobs:
  testing:
    name: testing
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      POSTGRES_URL : ${{ secrets.POSTGRES_URL }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      TESTING : ${{ secrets.TESTING }}
      LOCALSTACK_URL: ${{ secrets.LOCALSTACK_URL }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      HOST: ${{ secrets.HOST }}
      PORT: 8000

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: user_management
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:7.2.4-alpine
        ports:
          - "6379:6379"
        env:
          ALLOW_EMPTY_PASSWORD : yes
          REDIS_PORT : ${REDIS_PORT}


    steps:
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.1'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Migrations
        run: |
          poetry run alembic upgrade head

      - name: Run tests
        run: |
          poetry run pytest -s

      - name: Check coverage
        run: |
          COVERAGE_THRESHOLD=80
          ACTUAL_COVERAGE=$(poetry run pytest --cov-report xml | grep -oP 'line-rate="[^"]+"' | grep -oP '[^"]+')
          if (( $(echo "$ACTUAL_COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Test coverage is below $COVERAGE_THRESHOLD%. Cancelling the push."
            exit 1
          else
            echo "Test coverage is acceptable."
          fi
